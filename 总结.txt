1、Semaphore适应于限制访问资源的线程总数
2、CountDownLatch适应于需要等待多个事件发生后才能开始做其它事情
3、CyclicBarrier适应于多个线程执行过程中在某个阶段需要做些公共处理，但线程在最后一个线程到达这个阶段后所有线程继续执行，公共处理并发执行。
4、Exchanger适应于两个线程之间交换数据，但收到的对方数据必须清除，否则执行会出现不可预料的问题
5、SynchronousQueue适应于生产者-消费者场景模式（1、生产者不断生产，不阻塞，而消费者每次消费一个后继续消费，没有数据时阻塞；2、生产者每生产一个数据在消费者没有消费之前阻塞，直到消费者消费后）

6、线程池队列
1）SynchronousQueue
2) LinkedBlockingQueue
特点：队列没有大小限制，当没有空闲核心线程执行任务时，优先将待执行任务放置于队列中，由于队列大小无限制，因此无法触发在队列满时创建新线程执行任务，从而最大线程池大小没有作用。
3) ArrayBlockingQueue
特点：队列大小有限制，当没有空闲核心线程执行任务时，优先将待执行任务放置于队列中，由于队列大小有限制，当队列满时触发创建新线程执行任务，直至最大线程数满额，此时不能再添加新任务，执行添加会触发拒绝处理逻辑。
